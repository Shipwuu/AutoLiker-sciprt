// ==UserScript==
// @name         AniList AutoLiker by ~Shipuu
// @namespace    http://tampermonkey.net/
// @version      4.0
// @description  Auto-like all visible activities on AniList except blacklist user + real-time log panel by ~Shipuu / ~Cyluu
// @match        https://anilist.co/user/*
// @match        https://anilist.co/home*
// @match        https://anilist.co/anime/*
// @match        https://anilist.co/manga/*
// @match        https://anilist.co/anime/*/social*
// @match        https://anilist.co/manga/*/social*
// @match        https://anilist.co/activity/*
// @grant        GM_xmlhttpRequest
// @connect      anilist.co
// ==/UserScript==

(function() {
  'use strict';

  const BLACKLIST_USER = "Shipuu";
  const DELAY = 300;

  function sleep(ms){ return new Promise(r=>setTimeout(r, ms)); }

  function isAlreadyLiked(btn){
    if(!btn) return false;
    const cls = (btn.className||"").toLowerCase();
    if(cls.includes("liked")) return true;
    if(btn.getAttribute("aria-pressed")==="true") return true;
    return false;
  }

  function findActivityId(node){
    let a = node.closest('[data-id]');
    if(a) return parseInt(a.getAttribute("data-id"));
    const link = node.querySelector('a[href^="/activity/"]');
    if(link) return parseInt(link.getAttribute("href").split("/").pop());
    return null;
  }

  function getUserName(node){
    const ulink = node.querySelector('a.name[href^="/user/"]');
    if(!ulink) return null;
    return ulink.getAttribute("href").replace("/user/","").replace(/\//g,"");
  }

  function collect(){
    const btns = Array.from(document.querySelectorAll('.action.likes .button, .like-wrap .button'));
    const list = [];
    for(const b of btns){
      if(isAlreadyLiked(b)) continue;

      const activity = b.closest('.activity-entry')||b.parentElement;
      if(!activity) continue;

      const uname = getUserName(activity);
      if(uname && uname.toLowerCase() === BLACKLIST_USER.toLowerCase()) continue;

      const id = findActivityId(activity);
      if(!id) continue;

      list.push({id, btn:b, user:uname});
    }
    return list;
  }

  function sendLike(id){
    return new Promise((resolve)=>{
      GM_xmlhttpRequest({
        method: "POST",
        url: "https://anilist.co/graphql",
        headers: { "content-type":"application/json" },
        data: JSON.stringify({
          query: `
            mutation($id:Int,$type:LikeableType){
              ToggleLike:ToggleLikeV2(id:$id,type:$type){
                ... on ListActivity {id isLiked}
                ... on TextActivity {id isLiked}
                ... on MessageActivity {id isLiked}
              }
            }`,
          variables: {id, type:"ACTIVITY"}
        }),
        onload: r=>{
          try {
            const j = JSON.parse(r.responseText);
            resolve(j.data?.ToggleLike?.isLiked===true);
          } catch(e){ resolve(false); }
        },
        onerror: ()=>resolve(false)
      });
    });
  }

  function addUI(){
    if(document.getElementById("al-btn")) return;
    const nav = document.querySelector('.links');
    if(!nav) return;

    // Auto like button
    const btn=document.createElement("button");
    btn.id="al-btn";
    btn.textContent="Auto Like";
    btn.style="margin-left:25px;padding:6px 10px;border:0;border-radius:6px;background:#e85d75;color:#fff;cursor:pointer;";

    // Toggle log button
    const toggle=document.createElement("button");
    toggle.id="log-toggle";
    toggle.textContent="Log";
    toggle.style="margin-left:10px;padding:6px 10px;border:0;border-radius:6px;background:#3b82f6;color:#fff;cursor:pointer;";

    nav.parentNode.insertBefore(btn, nav.nextSibling);
    nav.parentNode.insertBefore(toggle, btn.nextSibling);

    // Log panel
    const panel=document.createElement("div");
    panel.id="log-panel";
    panel.style="position:fixed;bottom:20px;right:20px;width:300px;height:200px;background:rgba(0,0,0,0.85);color:#fff;font-size:12px;border-radius:8px;padding:6px;display:none;resize:both;overflow:auto;z-index:9999;box-shadow:0 4px 8px rgba(0,0,0,0.4);";
    const header=document.createElement("div");
    header.textContent="📜 Auto Like Log";
    header.style="font-weight:bold;cursor:move;margin-bottom:4px;";
    panel.appendChild(header);
    const logContainer=document.createElement("div");
    logContainer.id="log-container";
    panel.appendChild(logContainer);
    document.body.appendChild(panel);

    // Drag
    let drag=false,offX,offY;
    header.addEventListener("mousedown",(e)=>{drag=true;offX=e.clientX-panel.offsetLeft;offY=e.clientY-panel.offsetTop;});
    document.addEventListener("mousemove",(e)=>{if(drag){panel.style.left=(e.clientX-offX)+"px";panel.style.top=(e.clientY-offY)+"px";panel.style.right="auto";panel.style.bottom="auto";}});
    document.addEventListener("mouseup",()=>drag=false);

    // Toggle log
    toggle.onclick=()=>{ panel.style.display=(panel.style.display==="none")?"block":"none"; };

    function log(msg){
      const e=document.createElement("div");
      e.textContent=`[${new Date().toLocaleTimeString()}] ${msg}`;
      logContainer.appendChild(e);
      logContainer.scrollTop=logContainer.scrollHeight;
    }

    btn.addEventListener("click", async()=>{
      btn.disabled=true;
      const list=collect();
      if(list.length===0){ alert("There are no new activities to like."); btn.disabled=false; return; }
      let success=0;
      for(let i=0;i<list.length;i++){
        const ok=await sendLike(list[i].id);
        if(ok){ success++; log(`✔ Liked activity ${list[i].id} by ${list[i].user}`); }
        else { log(`❌ Failed ${list[i].id}`); }
        await sleep(DELAY);
      }
      log(`✅ Success: ${success}/${list.length} liked. Don't forget to Refresh! (blacklist: ${BLACKLIST_USER}).`);
      btn.disabled=false;
    });
  }

  new MutationObserver(addUI).observe(document.body,{childList:true,subtree:true});
  addUI();
})();
